# How to use this file
#
# 2 steps to use this file:
#
# 1. With docker installed run the following:
# docker build --rm -t younique/code-tests - < Dockerfile.tests
#
# 2. To run the tests, run the following:
# docker run -it -v <local_path>:/var/www/code [-v <coverage_path>:/root/code-coverage] younique/code-tests [-s] [-m] [-h /root/code-coverage] [-c /root/code-coverage] [-j /root/code-coverage]
#
# <local_path> is replaced by the directory of the "code" repo on the host machine. <local_path> could be replaced by `pwd` in many cases.
# <coverage_path> is replaced by the directory of the local directory you want the coverage reports exported.
# Note that <local_path> and <coverage_path> must be absolute paths. Relative or paths with '~' will not work.
#
# Important: On *nix and Mac boxes, add your user to the docker group and run docker as your own user or permissions issues will crop up. (sudo usermod -aG docker <your_username>)
#
# Examples:
#
# Run a the api/Test/Case/Medium/UserTest.php tests (no coverage reports)
# docker run -it -v /Users/name/Projects/code:/var/www/code younique/code-tests -p api -t Medium/User
#
# Run a the cake/app/Test/Case/Small/YouniqueAPITest.php tests (no coverage reports)
# docker run -it -v /Users/name/Projects/code:/var/www/code younique/code-tests -p cake/app -t Small/YouniqueAPI
#
# Run small tests only (no coverage reports) - your code is in ~/Projects/code
# docker run -it -v /Users/name/Projects/code:/var/www/code younique/code-tests
#
# Run medium tests only (no coverage reports) - your code is at /var/www/code
# docker run -it -v /var/www/code:/var/www/code younique/code-tests -m
#
# Run small and medium tests (no coverage reports)
# docker run -it -v <local_path>:/var/www/code younique/code-tests -sm
#
# Run small and medium tests (with HTML coverage reports in your Documents directory)
# docker run -it -v <local_path>:/var/www/code -v ~/Documents:/root/code-coverage younique/code-tests -sm -h /root/code-coverage
#
# Run small tests only (with Junit reports in your Downloads directory)
# docker run -it -v <local_path>:/var/www/code -v ~/Downloads:/root/code-coverage younique/code-tests -s -j /root/code-coverage
#
# Run small tests only (with Junit and clover reports in your Downloads directory)
# docker run -it -v <local_path>:/var/www/code -v ~/Downloads:/root/code-coverage younique/code-tests -j /root/code-coverage -c /root/code-coverage
#

FROM epcallan/php7-testing-phpunit:7.0-phpunit5

RUN apt-get update && \
    apt-get install -y gnupg

# Install nodejs
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash - && apt-get install -y nodejs

# Update to latest version of npm
RUN npm i -g npm

# Install junit-merge
RUN npm install -g junit-merge n && n stable

# Install PHP modules
RUN docker-php-ext-install -j$(nproc) iconv gettext mbstring calendar

# pull in GPG key
COPY ./CodeBuild/mysqlgpg.pub mysqlgpg.pub

# Install MySQL 5.6
RUN apt-key add ./mysqlgpg.pub && \
    echo "deb http://repo.mysql.com/apt/debian/ jessie mysql-5.6" >> /etc/apt/sources.list.d/mysql.list && \
    apt-get update && apt-get install -y mysql-server

# Install empty databases
RUN chown -R mysql:mysql /var/lib/mysql /var/run/mysqld && \
    service mysql start && \
    mysql -e "CREATE DATABASE YouniqueTest" && \
    mysql -e "CREATE DATABASE Younique"

# Add required directories and PHP config
RUN mkdir -p /var/www/code && \
    mkdir /root/code-coverage && \
    echo "log_errors = On" >> /usr/local/etc/php/php.ini && \
    echo "error_log = /var/log/php.log" >> /usr/local/etc/php/php.ini

CMD ["/var/www/code/run-tests.sh"]
